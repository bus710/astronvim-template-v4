{
    "setup":{
        "prefix": ["zig-gpa"],
        "description": "Zig gpa code snippet",
        "body":[
            "pub fn example() !void {",
            "    var gpa = std.heap.GeneralPurposeAllocator(.{}){};",
            "    const allocator = gpa.allocator();",
            "",
            "    // Allocate a single u32",
            "    const num0 = try allocator.create(u32);",
            "    defer allocator.destroy(num0);",
            "    num0.* = 10;",
            "    std.debug.print(\"num0: {}\\n\", .{num0.*});",
            "    std.debug.print(\"num0: {any}\\n\", .{@TypeOf(num0)});",
            "",
            "    // Allocate an array of u32",
            "    const num1 = try allocator.alloc(u32, 1);",
            "    defer allocator.free(num1);",
            "    num1[0] = 20;",
            "    std.debug.print(\"num1: {any}\\n\", .{num1});",
            "    std.debug.print(\"num1: {any}\\n\", .{@TypeOf(num1)});",
            "",
            "    // Allocate a string",
            "    const str0 = try allocator.create([10]u8);",
            "    defer allocator.destroy(str0);",
            "    @memset(str0, 0);",
            "    @memcpy(str0[0..\"Hello\".len], \"Hello\");",
            "    std.debug.print(\"str0: {s}\\n\", .{str0});",
            "    std.debug.print(\"str0: {any}\\n\", .{@TypeOf(str0)});",
            "",
            "    // Allocate a struct",
            "    const MyStruct = struct {",
            "        a: u32,",
            "        b: u32,",
            "    };",
            "    const myStruct = try allocator.create(MyStruct);",
            "    defer allocator.destroy(myStruct);",
            "    myStruct.* = MyStruct{ .a = 1, .b = 2 };",
            "    std.debug.print(\"myStruct: {any}\\n\", .{myStruct});",
            "    std.debug.print(\"myStruct: {any}\\n\", .{@TypeOf(myStruct)});",
            "",
            "    // Allocate an array of structs",
            "    const myStruct2 = try allocator.alloc(MyStruct, 3);",
            "    defer allocator.free(myStruct2);",
            "    myStruct2[0] = MyStruct{ .a = 3, .b = 4 };",
            "    myStruct2[1] = MyStruct{ .a = 5, .b = 6 };",
            "    for (myStruct2, 0..) |ms2, i| {",
            "        std.debug.print(\"myStruct2[{d}]: {any}\\n\", .{ i, ms2 });",
            "    }",
            "    std.debug.print(\"myStruct2: {any}\\n\", .{@TypeOf(myStruct2)});",
            "}"
        ]
    }
}
